Суть:
    * Максимально разграничиваем ui верстку и бизнес логику.
    * UI стараемся делать через StatlessWidget, а логику реализовывать в специльном для этого экрана\виджета Bloc или Cubit.
    * Каждый экран Statless Widget со своим Scaffold, который провайдит себе блок.

    * ВСЕ интерфейсы хранить в отдельной папке. В ней уже папки под репозитории, сервисы и тд.
    * Логика работы роутинга храниться в отдельной папке.

    * Писать хотя бы простые комментарии с объясненем что это и для чего на: классы, методы, поля, множества и компоненты множества.

Предложения:
    1) Реаллизовать DiContainer, который и внедряет все стартовые глобальные зависимости в GetIt.
    2) Глобальные блоки прокидывать через GetIt. Локальные через BlocProvider. 
    3) Объеденить все глобальные редкоизменяющиеся параметры (локализация, тема, авторизация и тд) в ОДИН большой State (например GlobalAppState), внутри которого и будут разделения на подпункты. и Реализовать ОДНИН глобальный Bloc или Cubit для этого стэйта. 


    2 и 3 пункты позволят в разы облегчить дерево (сейчас: см. картинку "Current Providers"), А первый пункт сделает удобную и понятную инициализацию всего этого добра.